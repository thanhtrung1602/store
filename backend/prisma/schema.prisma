generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  address_id Int       @id @default(autoincrement())
  user_id    Int?
  street     String?   @db.VarChar(255)
  city       String?   @db.VarChar(100)
  state      String?   @db.VarChar(100)
  zip_code   String?   @db.VarChar(20)
  country    String?   @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  category_id Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(100)
  description String?
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  products    products[]
}

model orderitems {
  order_item_id Int       @id @default(autoincrement())
  order_id      Int?
  product_id    Int?
  quantity      Int
  price         Decimal   @db.Decimal(10, 2)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  orders        orders?   @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
  products      products? @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  order_id   Int          @id @default(autoincrement())
  user_id    Int?
  total      Decimal      @db.Decimal(10, 2)
  status     String       @db.VarChar(50)
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  orderitems orderitems[]
  users      users?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  product_id  Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  description String?
  price       Decimal      @db.Decimal(10, 2)
  stock       Int?         @default(0)
  category_id Int?
  user_id    Int?
  @@index([category_id])
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  orderitems  orderitems[]
  categories  categories?  @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  users       users?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  reviews     reviews[]
}


/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id  Int       @id @default(autoincrement())
  product_id Int?
  user_id    Int?
  rating     Int?
  comment    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   products? @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id    Int         @id @default(autoincrement())
  username   String      @unique @db.VarChar(50)
  password   String      @db.VarChar(255)
  email      String      @unique @db.VarChar(100)
  full_name  String?     @db.VarChar(100)
  created_at DateTime?   @default(now()) @db.Timestamp(6)
  role       UserRole    @default(CLIENT)
  addresses  addresses[]
  orders     orders[]
  reviews    reviews[]
  products   products[] 
}

enum UserRole {
  ADMIN
  CLIENT
}